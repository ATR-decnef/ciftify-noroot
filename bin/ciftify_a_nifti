#!/usr/bin/env python
"""
Projects a masks (or set of masks) in nifti space to a surface and subcortical masks.

Usage:
  ciftify_a_nifti [options] <vol.nii.gz> <output.dscalar.nii>

Arguments:
    <vol.nii.gz>           Nifty volume to project to cifti space
    <output.dscalar.nii>   Output dscalar.nii image

Options:
  --hcp-subjects-dir PATH  Path to the hcp subject directory.
  --integer-labels         The nifti input file contains integer label values
  --surface-vol NII        Specify a separate volume for surface projection than <vol.nii.gz>
  --subcortical-vol NII    Specify a separate volume for subcortical masks than <vol.nii.gz>
  --dilate mm              Run cifti-dilate with a specified mm
  --HCP-subject            Use this option to indicate this subject is from the HCP dataset
  --HCP-MSMall             Project to teh MSMall surface (instead of '32k_fs_LR', only works for HCP subjects)
  --resample-voxels        Use this argument to resample voxels 2x2x2 before projecting
  -v,--verbose             Verbose logging
  --debug                  Debug logging in Erin's very verbose style
  -n,--dry-run             Dry run
  -h,--help                Print help

DETAILS
If no subject is given, this projects data HCP_S900_GroupAvg midsurface (32k).
If another subject directory is given with the '--hcp-subjects-dir' option.
the MNINonLinear/32k_fs_LR space in hcp for this subject. (the space used for fMRI analysis)

This assumes that the HCP folder was created with fs2hcp. Data from the HCP project
is named and organized slightly differently. To map data to a subject from the
HCP project dataset, use the "--HCP-subject" option.

The "--surface-vol" and "--subcortical-vol" options were added so that you can specify
separate input nifty volumes for masks one the surface and for subcortical space.
(For example, so that a large hippocampus cluster is not projected to the nearby cortical surface).
If they are not given, <vol.nii.gz> will be used as the input volume for their steps.

The "--dilate" option will add a can to wb_commands -cifti-dilate function
(with the specified mm option) to expand clusters and fill holes.

Written by Erin W Dickie, Mar 1, 2016
"""
from ciftify.docopt import docopt
import numpy as np
import nibabel as nib
import os
import tempfile
import shutil
import subprocess
import ciftify
import pandas as pd

arguments       = docopt(__doc__)
input_nii       = arguments['<vol.nii.gz>']
hcp_subject_dir = arguments['--hcp-subjects-dir']
output_dscalar  = arguments['<output.dscalar.nii>']
nifti_labels    = arguments['--integer-labels']
surface_input_nii = arguments['--surface-vol']
subcortical_input_nii = arguments['--subcortical-vol']
resample_volume = arguments['--resample-voxels']
this_is_HCP     = arguments['--HCP-subject']
use_MSMall      = arguments['--HCP-MSMall']
dilate_mm       = arguments['--dilate']
VERBOSE         = arguments['--verbose']
DEBUG           = arguments['--debug']
DRYRUN          = arguments['--dry-run']

if not surface_input_nii: surface_input_nii = input_nii
if not subcortical_input_nii: subcortical_input_nii = input_nii
###
### Erin's little function for running things in the shell
def docmd(cmdlist):
    "sends a command (inputed as a list) to the shell"
    if DEBUG: print ' '.join(cmdlist)
    if not DRYRUN: subprocess.call(cmdlist)

#mkdir a tmpdir for the
tmpdir = tempfile.mkdtemp()

## determine all the surfaces and templates involved
if hcp_subject_dir:
    ## if a subjects directory was named..these are the paths inside that directory
    subject = os.path.basename(os.path.abspath(hcp_subject_dir))
    surface_dir = os.path.join(hcp_subject_dir,'MNINonLinear','fsaverage_LR32k')
    ## the masks for the subcortical structures
    AtlasROIs_MNI2mm = os.path.join(hcp_subject_dir,'MNINonLinear','ROIs','Atlas_ROIs.2.nii.gz')
    ## the masks for the surfaces (removed the middle subcortical bit)
    surf_roi_L = os.path.join(surface_dir,'{}.L.atlasroi.32k_fs_LR.shape.gii'.format(subject))
    surf_roi_R = os.path.join(surface_dir,'{}.R.atlasroi.32k_fs_LR.shape.gii'.format(subject))

    ## the T1w image name and the surface type is determined by the preprocessing pipeline
    ## note: were taking the 2x2x2mm version in all cases, and the 32k meshes
    if this_is_HCP:
        T1wImage_MNI2mm = os.path.join(hcp_subject_dir,'MNINonLinear','T1w_restore.2.nii.gz')
        if use_MSMall:
            ## MSMall surface have gone though an extra realignment stage..little fancier
            surface_type = '_MSMAll.32k_fs_LR'
        else:
            surface_type = '.32k_fs_LR'
    else:
        ## if this is a ciftify generated subject (i.e. the default) these are the inputs
        T1wImage_MNI2mm = os.path.join(hcp_subject_dir,'MNINonLinear','T1w.2.nii.gz')
        surface_type = '.32k_fs_LR'

else:
    ## if no hcp subject directory is given, surfaces from the HCP_S900_GroupAvg_v1 folder are used
    subject = "S900"
    surface_dir = ciftify.config.find_HCP_S900_GroupAvg()
    surface_type = '_MSMAll.32k_fs_LR'
    ## however, to keep the result in 2x2x2 we use the MNI152_T1_2mm for resampling the subcortex
    T1wImage_MNI2mm = os.path.join(os.path.dirname(ciftify.config.find_fsl()), 'data','standard','MNI152_T1_2mm.nii.gz')
    AtlasROIs_MNI2mm = os.path.join(ciftify.config.find_ciftify_global(),'91282_Greyordinates','Atlas_ROIs.2.nii.gz')
    ## we will use the standard surface rois to mask out the middle bit
    surf_roi_L = os.path.join(ciftify.config.find_ciftify_global(),'91282_Greyordinates','L.atlasroi.32k_fs_LR.shape.gii')
    surf_roi_R = os.path.join(ciftify.config.find_ciftify_global(),'91282_Greyordinates','R.atlasroi.32k_fs_LR.shape.gii')

## project the surface data
if nifti_labels:
    ## if the data are integer masks - we use the "-enclosing" method
    for hemi in ['L','R']:
        docmd(['wb_command',
            '-volume-to-surface-mapping',
            surface_input_nii,
            os.path.join(surface_dir,'{}.{}.midthickness{}.surf.gii'.format(subject,hemi, surface_type)),
            os.path.join(tmpdir, '{}.func.gii'.format(hemi)),
            '-enclosing'])
else:
    ## for numeric (float) data we use ribbon contrained method
    for hemi in ['L','R']:
        docmd(['wb_command',
            '-volume-to-surface-mapping',
            surface_input_nii,
            os.path.join(surface_dir,'{}.{}.midthickness{}.surf.gii'.format(subject,hemi,surface_type)),
            os.path.join(tmpdir, '{}.func.gii'.format(hemi)),
            '-ribbon-constrained',
            os.path.join(surface_dir, '{}.{}.white{}.surf.gii'.format(subject,hemi,surface_type)),
            os.path.join(surface_dir, '{}.{}.pial{}.surf.gii'.format(subject,hemi,surface_type))])

## if asked to resample the volume...do this step
if resample_volume:
    rinput_subcortical = os.path.join(tmpdir, 'input_nii_r.nii.gz')
    if nifti_labels:
        docmd(['flirt', '-in', subcortical_input_nii,
                  '-ref', T1wImage_MNI2mm,
                  '-out', rinput_subcortical,
                  '-applyxfm',
                  '-init', os.path.join(os.path.dirname(ciftify.config.find_fsl()),'etc','flirtsch','ident.mat'),
                  '-interp', 'nearestneighbour'])

    else:
        docmd(['flirt', '-in', subcortical_input_nii,
                  '-ref', T1wImage_MNI2mm,
                  '-out', rinput_subcortical,
                  '-applyxfm',
                  '-init', os.path.join(os.path.dirname(ciftify.config.find_fsl()),'etc','flirtsch','ident.mat')])
else:  rinput_subcortical = subcortical_input_nii

if dilate_mm:
    dense_out = os.path.join(tmpdir,'dense1.dscalar.nii')
else:
    dense_out = output_dscalar

## combind all three into a dscalar..
docmd(['wb_command',
    '-cifti-create-dense-scalar',
    dense_out,
    '-volume',
    rinput_subcortical,
    AtlasROIs_MNI2mm,
    '-left-metric', os.path.join(tmpdir, 'L.func.gii'),
    '-roi-left', surf_roi_L,
    '-right-metric', os.path.join(tmpdir, 'R.func.gii'),
    '-roi-right', surf_roi_R])

## run the dilation is asked for..
if dilate_mm:
    if nifti_labels:
        docmd(['wb_command', '-cifti-dilate', dense_out, 'COLUMN',
            str(dilate_mm), str(dilate_mm), output_dscalar,
            '-left-surface',
            os.path.join(surface_dir,'{}.L.midthickness{}.surf.gii'.format(subject,surface_type)),
            '-right-surface',
            os.path.join(surface_dir,'{}.R.midthickness{}.surf.gii'.format(subject,surface_type)),
            '-nearest'])
    else:
        docmd(['wb_command', '-cifti-dilate', dense_out, 'COLUMN',
            str(dilate_mm), str(dilate_mm), output_dscalar,
            '-left-surface',
            os.path.join(surface_dir,'{}.L.midthickness{}.surf.gii'.format(subject,surface_type)),
            '-right-surface',
            os.path.join(surface_dir,'{}.R.midthickness{}.surf.gii'.format(subject,surface_type))])


#get rid of the tmpdir
shutil.rmtree(tmpdir)
