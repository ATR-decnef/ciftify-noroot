#!/usr/bin/env python
"""
Makes pictures of standard views from the hcp files and pastes them
together into a qcpage.

Usage:
    cifti-vis-recon-all snaps <QCmode> [options] <subject>
    cifti-vis-recon-all index <QCmode> [options]

Arguments:
  <QCmode>                 Type of QC to do ("MNIfsaverage32k","native")
  <subject>                The subject to make snaps for.

Options:
  --qcdir PATH             Full path to location of QC directory
  --hcp-data-dir PATH      The directory for HCP subjects (overrides HCP_DATA enviroment variable)
  --debug                  Debug logging in Erin's very verbose style
  -n,--dry-run             Dry run
  --help                   Print help

DETAILS
This makes pretty pictures of your hcp views using connectome workbenches "show scene" commands
It pastes the pretty pictures together into some .html QC pages

There are two "modes" for the spaces that are visulized:
  + native
     ++ views of subject brains in "native" space i.e. the "raw" converted freesurfer outputs
     ++ Same information as the freesurfer QC tools
  + MNIfsaverage32k
     ++ views for the MNI transformed brains and fsaverage_LR surfaces (32k meshes)
     ++ this is the "space" where fMRI analysis is done

Also this function works by writting a temporary file into the HCP_DATA directory,
therefore, write permission in the HCP_DATA directory is required.

Requires connectome workbench (i.e. wb_command and imagemagick)

Written by Erin W Dickie, Feb 2016
"""

import ciftify
import os
import subprocess
import glob
import sys
import tempfile
import shutil
from docopt import docopt

arguments       = docopt(__doc__)
qcmode          = arguments['<QCmode>']
snaps_only      = arguments['snaps']
index_only      = arguments['index']
subject           = arguments['<subject>']
hcp_data_dir     = arguments['--hcp-data-dir']
qcdir           = arguments['--qcdir']
DEBUG           = arguments['--debug']
DRYRUN          = arguments['--dry-run']
if DEBUG: print arguments

## define the location of the template scenefile
template_dir = os.path.join(ciftify.config.find_scene_templates())
## define the settings for the qcpages
# Note: order for the list is the order in the scene file
# Name: the name that will apear as filenames and in title of qc page
# MakeIndex : if True, this will create a html page of everyparticipant for this views
# SplitHorizontal: Wether or not to split the image in half and display it as a line.
QCmodes = {
    'MNIfsaverage32k':{
        "TemplateFile":'MNIfsaverage32k_template.scene',
        "scene_list" :  [
            {"Idx": 1, "Name": "aparc",            "MakeIndex": True,  "SplitHorizontal" : True, "Keep":True},
            {"Idx": 2, "Name": "SurfOutlineAxial",  "MakeIndex": True,  "SplitHorizontal" : True,"Keep":True},
            {"Idx": 3, "Name": "SurfOutlineCoronal", "MakeIndex": False, "SplitHorizontal" : True,"Keep":True},
            {"Idx": 4, "Name": "SurfOutlineSagittal", "MakeIndex": True, "SplitHorizontal" : True,"Keep":True},
            {"Idx": 5, "Name": "AllLeft",          "MakeIndex": False,  "SplitHorizontal" : False, "Keep": False},
            {"Idx": 6, "Name": "AllRight",          "MakeIndex": False,  "SplitHorizontal" : False, "Keep": False},
            {"Idx": 7, "Name": "AllVentral",          "MakeIndex": False,  "SplitHorizontal" : False, "Keep": False},
            {"Idx": 8, "Name": "AllDorsal",          "MakeIndex": False,  "SplitHorizontal" : False, "Keep": False}],
        "montage_list" : [{"Name": "CombinedView",
                       "Pics":["AllLeft","AllRight","AllDorsal","AllVentral"],
                       "Layout":"4x1",
                       "MakeIndex": True}]
    },
    'native':{
        "TemplateFile":'native_template.scene',
        "scene_list" :  [
            {"Idx": 10, "Name": "asegAxial",  "MakeIndex": True,  "SplitHorizontal" : True,"Keep":True},
            {"Idx": 9, "Name": "asegCoronal", "MakeIndex": False, "SplitHorizontal" : True,"Keep":True},
            {"Idx": 11, "Name": "asegSagittal", "MakeIndex": True, "SplitHorizontal" : True,"Keep":True},
            {"Idx": 2, "Name": "SurfOutlineAxial",  "MakeIndex": True,  "SplitHorizontal" : True,"Keep":True},
            {"Idx": 3, "Name": "SurfOutlineCoronal", "MakeIndex": False, "SplitHorizontal" : True,"Keep":True},
            {"Idx": 4, "Name": "SurfOutlineSagittal", "MakeIndex": True, "SplitHorizontal" : True,"Keep":True},
            {"Idx": 5, "Name": "AllLeft",          "MakeIndex": False,  "SplitHorizontal" : False, "Keep": False},
            {"Idx": 6, "Name": "AllRight",          "MakeIndex": False,  "SplitHorizontal" : False, "Keep": False},
            {"Idx": 7, "Name": "AllVentral",          "MakeIndex": False,  "SplitHorizontal" : False, "Keep": False},
            {"Idx": 8, "Name": "AllDorsal",          "MakeIndex": False,  "SplitHorizontal" : False, "Keep": False},
            {"Idx": 12, "Name": "Curvature",          "MakeIndex": False,  "SplitHorizontal" : True, "Keep": True},
            {"Idx": 13, "Name": "Thickness",          "MakeIndex": True,  "SplitHorizontal" : True, "Keep": True},
            {"Idx": 1, "Name": "aparc",            "MakeIndex": True,  "SplitHorizontal" : True, "Keep":True}],
        "montage_list" : [{"Name": "CombinedView",
                       "Pics":["AllLeft","AllRight","AllDorsal","AllVentral"],
                       "Layout":"4x1",
                       "MakeIndex": True}]
    },
}

### Erin's little function for running things in the shell
def docmd(cmdlist):
    "sends a command (inputed as a list) to the shell"
    if DEBUG: print ' '.join(cmdlist)
    if not DRYRUN: subprocess.call(cmdlist)

## to run qc
## copy qc_template.scene into your hcp directory as qc_views.scene
def png_SplitHorizontal(input_png,output_png,tmpdir):
    '''
    uses imagemagick to split the image top and bottom halves to one line
    '''
    docmd(['convert', input_png,\
        '-crop', '100x50%+0+0', os.path.join(tmpdir,'top.png')])
    docmd(['convert', input_png,\
        '-crop', '100x50%+0+200', os.path.join(tmpdir,'bottom.png')])
    docmd(['montage', '-mode', 'concatenate', '-tile', '2x1', \
        os.path.join(tmpdir,'top.png'),\
        os.path.join(tmpdir,'bottom.png'),\
        os.path.join(output_png)])

def write_index(qcdir, subjects, pic_name, colwidth, indexname, title):
    '''
    Writes html file with all subjects for one pic shown together
    '''
    # open the file
    htmlindex = open(os.path.join(qcdir,indexname),'w')

    # write the header and title line
    htmlindex.write('<!DOCTYPE html>\n<HTML><TITLE>{}</TITLE>\n'.format(title))
    ciftify.html.write_header(htmlindex)
    htmlindex.write('<body>\n')
    ## writing the navigation bar
    nav_list = [{'href': "", 'label':'View:'}]
    for scene_dict in scene_list:
        if scene_dict['MakeIndex']==True:
            nav_list.append({ 'href': "{}.html".format(scene_dict['Name']),
                               'label': scene_dict['Name'] })
    for montage_dict in montage_list:
        if montage_dict['MakeIndex']==True:
                nav_list.append({ 'href': "{}.html".format(montage_dict['Name']),
                                   'label': montage_dict['Name'] })
    nav_list.append({'href': "index.html", 'label':'Index'})
    ciftify.html.write_navbar(htmlindex,
                    qcmode,
                    nav_list,
                    activelink = indexname)

    ## add the main title
    htmlindex.write('<h1>{}</h1>\n'.format(title))

    # add the pic and a link to the subjects' page
    for subject in subjects:
        subjectpage = os.path.join(qcdir,'{}'.format(subject),'qc.html')
        htmlindex.write('<div class="container" style="width: 100%;">')
        pic = os.path.join(qcdir,'{}'.format(subject) ,pic_name)
        picrelpath = os.path.relpath(pic,os.path.dirname(htmlindex.name))
        subrelpath = os.path.relpath(subjectpage,os.path.dirname(htmlindex.name))
        ciftify.html.add_image(htmlindex, colwidth,
                       subrelpath, picrelpath,
                       "{}".format(subject))
        htmlindex.write('</div>\n</br>')
    ## close the html index stream
    htmlindex.write('</body>\n')
    htmlindex.close()


## pic a QC dict
qc_dict = QCmodes[qcmode]
scene_list = qc_dict['scene_list']
montage_list = qc_dict['montage_list']
template_scene = os.path.join(template_dir,qc_dict['TemplateFile'])

## get the hcp_data_dir - cause we use it a lot
if not hcp_data_dir:
    hcp_data_dir = ciftify.config.find_hcp_data()

## set the qcdir Structure
if not qcdir:
    qcdir = os.path.join(hcp_data_dir,'qc_{}'.format(qcmode))


## make pics and qcpage for each subject
if snaps_only:
    ## make the output directory
    qc_subdir = os.path.join(qcdir,subject)
    qchtml = os.path.join(qc_subdir, 'qc.html'.format(subject))

    if not os.path.isfile(qchtml):
        docmd(['mkdir','-p', qc_subdir])

        #mkdir a tmpdir for the
        tmpdirbase = tempfile.mkdtemp()
        ## make a tempdir for this subject
        tmpdir = os.path.join(tmpdirbase,subject)
        docmd(['mkdir','-p', tmpdir])

        scene_dir=os.path.join(hcp_data_dir,'scene{}'.format(os.path.basename(tmpdirbase)))
        docmd(['mkdir','-p', scene_dir])

        ## copy out template .scene file and find and replace the subid and hcppath
        ## open the template scene for reading
        template_txt = open(template_scene, 'r').read()
        scenefile = os.path.join(scene_dir,'qc{}_{}.scene'.format(qcmode,subject))
        scenestream = open(scenefile,'w')
        scene_txt = template_txt.replace('HCP_DATA_PATH/', hcp_data_dir)
        scene_txt = scene_txt.replace('SUBJID',subject)
        scenestream.write(scene_txt)
        scenestream.close()


        ## write the header for the subjects qc page
        qchtml = open(qchtml,'w')
        qchtml.write('<!DOCTYPE html>\n<HTML><TITLE> qc {} {} </TITLE>\n'.format(subject,qcmode))
        ciftify.html.write_header(qchtml)
        qchtml.write('<body>\n')
        ## writing the navigation bar
        nav_list = [{'href': "", 'label':'View:'}]
        for scene_dict in scene_list:
            if scene_dict['MakeIndex']==True:
                nav_list.append({ 'href': "../{}.html".format(scene_dict['Name']),
                                   'label': scene_dict['Name'] })
        for montage_dict in montage_list:
            if montage_dict['MakeIndex']==True:
                    nav_list.append({ 'href': "../{}.html".format(montage_dict['Name']),
                                       'label': montage_dict['Name'] })
        nav_list.append({'href': "../index.html", 'label':'Index'})
        ciftify.html.write_navbar(qchtml,
                        qcmode,
                        nav_list)
        qchtml.write('\n<h1>QC {} {}</h1>\n'.format(subject,qcmode))

        ## for each scene, generate the pics and add to qc page
        for scene_dict in scene_list:
            if scene_dict['Keep']==True:
                pic = os.path.join(qc_subdir,'{}.png'.format(scene_dict['Name']))
                picrelpath = os.path.relpath(pic,os.path.dirname(qchtml.name))
                ciftify.html.add_image(qchtml, 12, picrelpath, picrelpath, "")
            else:
                pic = os.path.join(tmpdir,'{}.png'.format(scene_dict['Name']))
            if scene_dict['SplitHorizontal']==True:
                tmppic = os.path.join(tmpdir, "scene{}.png".format(scene_dict['Idx']))
                docmd(['wb_command', '-show-scene',
                        scenefile, str(scene_dict['Idx']),
                        tmppic,'600', '400'])
                png_SplitHorizontal(tmppic,pic,tmpdir)
            else:
                docmd(['wb_command', '-show-scene',
                        scenefile, str(scene_dict['Idx']),
                        pic,'600', '400'])

        for montage_dict in montage_list:
            pic = os.path.join(qc_subdir,'{}.png'.format(montage_dict['Name']))
            picrelpath = os.path.relpath(pic,os.path.dirname(qchtml.name))
            ciftify.html.add_image(qchtml, 12, picrelpath, picrelpath, "")
            montage_cmd=['montage', '-mode', 'concatenate', '-tile', montage_dict['Layout']]
            for subpic in montage_dict['Pics']:
                #should add something that read scenelist to find if temp
                montage_cmd.append(os.path.join(tmpdir,'{}.png'.format(subpic)))
            montage_cmd.append(pic)
            docmd(montage_cmd)

        ## close the htmlpage stream
        qchtml.close()
        ## remove the subjects scene file
        if not DEBUG: docmd(['rm', scenefile])
        if not DEBUG: docmd(['rmdir', scene_dir])
        #get rid of the tmpdir
        shutil.rmtree(tmpdirbase)


## Start the index html file
if index_only:
    subjects = ciftify.utilities.get_subj(qcdir)

    ## write the major index
    indexhtml = os.path.join(qcdir, 'index.html')
    indexhtml = open(indexhtml,'w')
    indexhtml.write('<!DOCTYPE html>\n<HTML><TITLE>{}</TITLE>\n'.format(qcmode))
    ciftify.html.write_header(indexhtml)
    indexhtml.write('<body>\n')

    ## writing the navigation bar
    nav_list = [{'href': "", 'label':'View:'}]
    for scene_dict in scene_list:
        if scene_dict['MakeIndex']==True:
            nav_list.append({ 'href': "{}.html".format(scene_dict['Name']),
                               'label': scene_dict['Name'] })
    for montage_dict in montage_list:
        if montage_dict['MakeIndex']==True:
                nav_list.append({ 'href': "{}.html".format(montage_dict['Name']),
                                   'label': montage_dict['Name'] })
    nav_list.append({'href': "index.html", 'label':'Index'})
    ciftify.html.write_navbar(indexhtml,
                    qcmode,
                    nav_list,
                    activelink = 'index.html')

    ## writing the lists to the main index page
    indexhtml.write('<h1>{} Index</h1>\n'.format(qcmode))
    indexhtml.write('<h2>All subjects together</h2>\n')
    indexhtml.write('<ul>\n  ')
    for scene_dict in scene_list:
        if scene_dict['MakeIndex']==True:
            indexhtml.write('<li><a href="{}.html">{} View</a></li>\n'.format(scene_dict['Name'], scene_dict['Name']))
    for montage_dict in montage_list:
        if montage_dict['MakeIndex']==True:
                indexhtml.write('<li><a href="{}.html">{} View</a></li>\n'.format(montage_dict['Name'], montage_dict['Name']))
    indexhtml.write('</ul>\n')
    indexhtml.write('<h2>Subject Pages</h2>\n')
    indexhtml.write('<ul>\n  ')
    for subject in subjects:
        indexhtml.write('<li><a href="{}/qc.html">{}</a></li>\n'.format(subject,subject))
    indexhtml.write('</ul>\n')
    indexhtml.write('</body>')
    indexhtml.close()

    for scene_dict in scene_list:
        if scene_dict['MakeIndex']==True:
            write_index(qcdir, subjects,
                        "{}.png".format(scene_dict['Name']), 12,
                        "{}.html".format(scene_dict['Name']),
                        "{} View Index ({} space)".format(scene_dict['Name'],qcmode))
    for montage_dict in montage_list:
        if montage_dict['MakeIndex']==True:
            write_index(qcdir, subjects,
                        "{}.png".format(montage_dict['Name']), 12,
                        "{}.html".format(montage_dict['Name']),
                        "{} View Index ({} space)".format(montage_dict['Name'],qcmode))
